{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkelly/chessrush/client/src/components/TacticBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { getSideToPlayFromFen, makeMove, getPossibleMoves, validateMoveOnClick, getMoveOnClick //playerInCheck,\n} from \"../utils/chessTactics\";\nimport { Chessboard } from \"react-chessboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TacticBoard(_ref) {\n  _s();\n\n  let {\n    tactic,\n    onSolve,\n    onCorrect,\n    onIncorrect,\n    boardWidth\n  } = _ref;\n  const [fen, setFen] = useState(tactic.fen);\n  const [solution, setSolution] = useState([]);\n  const [moveFrom, setMoveFrom] = useState(\"\");\n  const [rightClickedSquares, setRightClickedSquares] = useState({});\n  const [optionSquares, setOptionSquares] = useState({}); //const [inCheck, setInCheck] = useState(false);\n\n  useEffect(() => {\n    setSolution(tactic.solution);\n    setTimeout(() => {\n      const next = makeMove(tactic.fen, tactic.blunderMove);\n\n      if (next) {\n        setFen(next.fen);\n      }\n    }, 700);\n  }, [tactic]);\n\n  function getMoveOptions(square) {\n    if (optionSquares !== {}) {\n      setOptionSquares({});\n    }\n\n    const moves = getPossibleMoves(fen, square);\n\n    if (moves.length === 0) {\n      return;\n    }\n\n    const newSquares = {};\n    moves.map(move => {\n      newSquares[move.to] = {\n        background: \"radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)\",\n        borderRadius: \"50%\"\n      };\n      return move;\n    });\n    newSquares[square] = {\n      background: \"rgba(255, 255, 0, 0.4)\"\n    };\n    setOptionSquares(newSquares);\n  }\n  /*function makeRandomMove() {\n    const possibleMoves = game.moves();\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0)\n      return; // exit if the game is over\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    safeGameMutate((game) => {\n      game.move(possibleMoves[randomIndex]);\n    });\n  }*/\n\n\n  function onSquareClick(square) {\n    let currentMove;\n    setRightClickedSquares({});\n\n    function resetFirstMove(square) {\n      setMoveFrom(square);\n      getMoveOptions(square);\n    } // from square\n\n\n    if (!moveFrom) {\n      resetFirstMove(square);\n      return;\n    } // attempt to make move\n\n\n    let data = {\n      from: moveFrom,\n      to: square,\n      promotion: \"q\"\n    };\n    currentMove = getMoveOnClick(fen, data);\n    const next = validateMoveOnClick(fen, data, solution);\n    console.log(next);\n\n    if (next) {\n      setFen(next.fen);\n      setSolution(next.solution);\n\n      if (next.solution.length > 0) {\n        onCorrect();\n        const autoNext = validateMoveOnClick(next.fen, next.solution[0], next.solution);\n\n        if (autoNext) {\n          setTimeout(() => {\n            setFen(autoNext.fen);\n            setSolution(autoNext.solution);\n          }, 500);\n        }\n      } else {\n        onSolve();\n      }\n    } else if (currentMove && currentMove !== solution[0]) {\n      onIncorrect();\n      setMoveFrom(\"\");\n      setOptionSquares({});\n    } // if invalid, setMoveFrom and getMoveOptions\n\n\n    if (next === null) {\n      setMoveFrom(\"\");\n      setOptionSquares({});\n      return;\n    } //setTimeout(makeRandomMove, 300);\n\n\n    setMoveFrom(\"\");\n    setOptionSquares({});\n  }\n\n  function onSquareRightClick(square) {\n    const colour = \"rgba(0, 0, 255, 0.4)\";\n    setRightClickedSquares({ ...rightClickedSquares,\n      [square]: rightClickedSquares[square] && rightClickedSquares[square].backgroundColor === colour ? undefined : {\n        backgroundColor: colour\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Chessboard, {\n    id: \"tacticBoard\",\n    animationDuration: 300,\n    arePiecesDraggable: false,\n    boardWidth: boardWidth,\n    boardOrientation: getSideToPlayFromFen(tactic.fen) === \"b\" ? \"white\" : \"black\",\n    position: fen,\n    onSquareClick: onSquareClick,\n    onSquareRightClick: onSquareRightClick,\n    customBoardStyle: {\n      borderRadius: \"4px\",\n      boxShadow: \"0 5px 15px rgba(0, 0, 0, 0.5)\"\n    },\n    customSquareStyles: { ...optionSquares,\n      ...rightClickedSquares\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TacticBoard, \"pOfZWkIClk03q0FcmY+SxUy2IRU=\");\n\n_c = TacticBoard;\nexport default TacticBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TacticBoard\");","map":{"version":3,"names":["React","useEffect","useState","getSideToPlayFromFen","makeMove","getPossibleMoves","validateMoveOnClick","getMoveOnClick","Chessboard","TacticBoard","tactic","onSolve","onCorrect","onIncorrect","boardWidth","fen","setFen","solution","setSolution","moveFrom","setMoveFrom","rightClickedSquares","setRightClickedSquares","optionSquares","setOptionSquares","setTimeout","next","blunderMove","getMoveOptions","square","moves","length","newSquares","map","move","to","background","borderRadius","onSquareClick","currentMove","resetFirstMove","data","from","promotion","console","log","autoNext","onSquareRightClick","colour","backgroundColor","undefined","boxShadow"],"sources":["/Users/stephenkelly/chessrush/client/src/components/TacticBoard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  getSideToPlayFromFen,\n  makeMove,\n  getPossibleMoves,\n  validateMoveOnClick,\n  getMoveOnClick,\n  //playerInCheck,\n} from \"../utils/chessTactics\";\nimport { Chessboard } from \"react-chessboard\";\n\nfunction TacticBoard({ tactic, onSolve, onCorrect, onIncorrect, boardWidth }) {\n  const [fen, setFen] = useState(tactic.fen);\n  const [solution, setSolution] = useState([]);\n  const [moveFrom, setMoveFrom] = useState(\"\");\n  const [rightClickedSquares, setRightClickedSquares] = useState({});\n  const [optionSquares, setOptionSquares] = useState({});\n  //const [inCheck, setInCheck] = useState(false);\n\n  useEffect(() => {\n    setSolution(tactic.solution);\n    setTimeout(() => {\n      const next = makeMove(tactic.fen, tactic.blunderMove);\n      if (next) {\n        setFen(next.fen);\n      }\n    }, 700);\n  }, [tactic]);\n\n  function getMoveOptions(square) {\n    if (optionSquares !== {}) {\n      setOptionSquares({});\n    }\n    const moves = getPossibleMoves(fen, square);\n\n    if (moves.length === 0) {\n      return;\n    }\n\n    const newSquares = {};\n    moves.map((move) => {\n      newSquares[move.to] = {\n        background:\n          \"radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)\",\n        borderRadius: \"50%\",\n      };\n      return move;\n    });\n    newSquares[square] = {\n      background: \"rgba(255, 255, 0, 0.4)\",\n    };\n    setOptionSquares(newSquares);\n  }\n\n  /*function makeRandomMove() {\n    const possibleMoves = game.moves();\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0)\n      return; // exit if the game is over\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    safeGameMutate((game) => {\n      game.move(possibleMoves[randomIndex]);\n    });\n  }*/\n\n  function onSquareClick(square) {\n    let currentMove;\n\n    setRightClickedSquares({});\n\n    function resetFirstMove(square) {\n      setMoveFrom(square);\n      getMoveOptions(square);\n    }\n\n    // from square\n    if (!moveFrom) {\n      resetFirstMove(square);\n      return;\n    }\n\n    // attempt to make move\n    let data = {\n      from: moveFrom,\n      to: square,\n      promotion: \"q\",\n    };\n\n    currentMove = getMoveOnClick(fen, data);\n\n    const next = validateMoveOnClick(fen, data, solution);\n\n    console.log(next);\n\n    if (next) {\n      setFen(next.fen);\n      setSolution(next.solution);\n\n      if (next.solution.length > 0) {\n        onCorrect();\n\n        const autoNext = validateMoveOnClick(\n          next.fen,\n          next.solution[0],\n          next.solution\n        );\n\n        if (autoNext) {\n          setTimeout(() => {\n            setFen(autoNext.fen);\n            setSolution(autoNext.solution);\n          }, 500);\n        }\n      } else {\n        onSolve();\n      }\n    } else if (currentMove && currentMove !== solution[0]) {\n      onIncorrect();\n      setMoveFrom(\"\");\n      setOptionSquares({});\n    }\n\n    // if invalid, setMoveFrom and getMoveOptions\n    if (next === null) {\n      setMoveFrom(\"\");\n      setOptionSquares({});\n      return;\n    }\n\n    //setTimeout(makeRandomMove, 300);\n    setMoveFrom(\"\");\n    setOptionSquares({});\n  }\n\n  function onSquareRightClick(square) {\n    const colour = \"rgba(0, 0, 255, 0.4)\";\n    setRightClickedSquares({\n      ...rightClickedSquares,\n      [square]:\n        rightClickedSquares[square] &&\n        rightClickedSquares[square].backgroundColor === colour\n          ? undefined\n          : { backgroundColor: colour },\n    });\n  }\n\n  return (\n    <Chessboard\n      id=\"tacticBoard\"\n      animationDuration={300}\n      arePiecesDraggable={false}\n      boardWidth={boardWidth}\n      boardOrientation={\n        getSideToPlayFromFen(tactic.fen) === \"b\" ? \"white\" : \"black\"\n      }\n      position={fen}\n      onSquareClick={onSquareClick}\n      onSquareRightClick={onSquareRightClick}\n      customBoardStyle={{\n        borderRadius: \"4px\",\n        boxShadow: \"0 5px 15px rgba(0, 0, 0, 0.5)\",\n      }}\n      customSquareStyles={{\n        ...optionSquares,\n        ...rightClickedSquares,\n      }}\n    />\n  );\n}\n\nexport default TacticBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}